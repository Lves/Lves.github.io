<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LvesLi&#39;s Blogging</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lves.github.io/"/>
  <updated>2016-05-24T10:45:41.000Z</updated>
  <id>http://lves.github.io/</id>
  
  <author>
    <name>LvesLi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Objective-C 预处理器(The Preprocessor)</title>
    <link href="http://lves.github.io/2016/05/24/Objective-C-The-Preprocessor/"/>
    <id>http://lves.github.io/2016/05/24/Objective-C-The-Preprocessor/</id>
    <published>2016-05-24T01:38:28.000Z</published>
    <updated>2016-05-24T10:45:41.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;Objective-C&lt;/code&gt;源文件在编译之前要先经过预编译器处理，然后再扔给&lt;code&gt;LLVM&lt;/code&gt;处理、优化。&lt;code&gt;Objectice-C&lt;/code&gt;编译器从源文件的输入到编译后的输出文件,处理过程分解后如下图：&lt;br&gt;&lt;img src=&quot;/img/20160524/101.png&quot; alt=&quot;123.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示编译过程大体包括词法分析、语法分析、生成代码和优化、汇编链接，最后输出可执行的二进制文件。关于其中每个阶段的具体行为，我们就不做具体研究了，已经超出了我的能力范围（恨自己当年大学期间编译原理没有好好学啊），如果你感兴趣可以研究一下“龙书”《Compilers: Principles, Techniques, and Tools》，传说&lt;code&gt;LLVM&lt;/code&gt;的作者&lt;code&gt;Chris Lattner&lt;/code&gt; 曾经修炼了这本武功秘籍，还未毕业就被Apple盯上了。&lt;code&gt;龙书&lt;/code&gt;真容如下（快膜拜）：&lt;br&gt;&lt;img src=&quot;/img/20160524/102.png&quot; alt=&quot;234.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天我们主要看看和预处理器（词法分析部分）相关的内容。预处理器处理过程主要包括三个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文本翻译： 将输入的源文件分成代码行，并进行一些翻译处理。&lt;/li&gt;
&lt;li&gt;记号转换： 将上一步的处理结果转换成记号语言。&lt;/li&gt;
&lt;li&gt;基于预处理语言的转换： 如果上一步结果中含有预处理语言元素，就会进行转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前两部是自动处理的，第三部要根据预处理语言函数进行处理，&lt;/p&gt;
&lt;p&gt;##预处理语言&lt;/p&gt;
&lt;p&gt;预处理语言对源文件进行转换主要包括文件引用、条件编译、宏展开。预处理语言定义了预处理指令和宏定义。预处理指令是预处理器执行的命令和编译器无关，宏定义只是一个具有名称的一段代码，在文件中会被预处理器替换成相应代码。&lt;/p&gt;
&lt;p&gt;###指令&lt;br&gt;指令的格式: &lt;code&gt;#指令名 指令参数&lt;/code&gt; 例如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;quot;Student.h&amp;quot;
#define kBackColor  [UIColor redColor]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;指令主要包括以下四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件引用&lt;/li&gt;
&lt;li&gt;条件编译&lt;/li&gt;
&lt;li&gt;错误诊断&lt;/li&gt;
&lt;li&gt;Pragma&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#####头文件引用&lt;/p&gt;
&lt;p&gt;头文件引用主要由&lt;code&gt;#inlude&lt;/code&gt; 和&lt;code&gt;#import&lt;/code&gt; 两种。每种又分为尖括号(&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;)引用和双引号(&lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;)引用 。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;#inlude&lt;/code&gt;  与 &lt;code&gt;#import&lt;/code&gt; 的区别是： &lt;code&gt;#import&lt;/code&gt; 不会造成重复引用，它会自己检查是否已经引用过，也可以防止递归包含。&lt;/li&gt;
&lt;li&gt;尖括号(&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;)引用与双引号(&lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;)引用的区别是&lt;ul&gt;
&lt;li&gt;双引号(&lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;)引用的文件，编译器会首先在存储源文件的同一目录下搜索，如果文件没有找到编译器会搜索默认目录（配置文件中配置的头文件引用目录）。&lt;/li&gt;
&lt;li&gt;尖括号(&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;)引用 只会在默认目录下搜索。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#####条件编译&lt;br&gt;条件编译指令主要包括 (#if, #elif, #else, #endif, #ifdef, #ifndef) 利用他们可以选择性的编译代码。一个&lt;code&gt;#if&lt;/code&gt;或者&lt;code&gt;#ifdef&lt;/code&gt; 最后一定以&lt;code&gt;#endif&lt;/code&gt;结束,中间写条件处理或者插入else指令。例如：&lt;/p&gt;
&lt;p&gt;   #ifdef, #ifndef&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#ifdef DEBUG
       NSLog (@&amp;quot;File search complete. Found %i files&amp;quot;, filecount&amp;quot;);
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   #if, #elif, #else, #endif&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#if constant_expression

#else

#endif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#if constant_expression

#elif constant_expression

#endif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;#####诊断指令&lt;br&gt;诊断指令主要包括 &lt;code&gt;#error&lt;/code&gt; 和&lt;code&gt;#warning&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#ifndef    ifOpen
#error &amp;quot;Not Open&amp;quot;
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果进入到&lt;code&gt;#error&lt;/code&gt;指令，则编译器不会往下执行，如果编译到&lt;code&gt;#warning&lt;/code&gt;指令，只会显示一个警告信息，还会继续编译。&lt;/p&gt;
&lt;p&gt;#####Pragma指令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pragma&lt;/code&gt; 指令之一种编译器指令，它可以在特定平台下使用，像&lt;code&gt;mark&lt;/code&gt;指令可以对代码进行分段标记，让代码更容易查找和跳转到指定位置。 我在自己的Controller中经常这样&lt;code&gt;mark&lt;/code&gt;如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#pragma mark -
#pragma mark Life Cycle

#pragma mark -
#pragma mark Private Method

#pragma mark -
#pragma mark Action

#pragma mark -
#pragma mark Setter&amp;amp;Getter
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;###宏定义&lt;/p&gt;
&lt;p&gt;宏定义就是对代码段起个名字，编译器编译之前预处理器会进行简单的字符串替换。宏定义可以进行简单的替换：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define MY_CONSTANT 4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以定义一个带参数的代码段 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define SQUARE(x)  ((x) * (x))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为宏定义默认只支持一样，如果要定义多行时每行结尾要加一个斜线（&lt;code&gt;\&lt;/code&gt;），最后一行不用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#define SWAP(a, b) \
a^=b;\
b^=a;\
a^=b;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;宏定义&lt;code&gt;枚举&lt;/code&gt;和&lt;code&gt;Block&lt;/code&gt;在`OC中经常使用。宏定义会在编译之前进行处理，而且一旦定义在其作用范围内都可以引用，可以提高编程效率。宏定义功能强大，当然宏定义也不能乱用它也存在确定，比如难以维护和查错。真机测试时定义太多的宏，当修改一个值就会重新编译好久。建议经常修改的值不要使用宏。一些宏能用常量替换的尽量使用常量。&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://www.lvesli.com/?p=386&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.lvesli.com/?p=386&lt;/a&gt;    微信公众账号同步更新：&lt;code&gt;lecoding&lt;/code&gt;&lt;br&gt;下面列出我自己项目中经常使用的宏定义：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//1. 打印日志
#ifdef DEBUG
#    define DLog(...) NSLog(__VA_ARGS__)
#else
#    define DLog(...)
#endif

//2. 获取屏幕 宽度、高度
#define kScreenWidth ([UIScreen mainScreen].bounds.size.width)
#define kScreenHeight ([UIScreen mainScreen].bounds.size.height)

//3. 颜色
#define RGB(r, g, b, a)  [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]
#define HEXCOLOR(c)       [UIColor colorWithRed:((c&amp;gt;&amp;gt;16)&amp;amp;0xFF)/255.0f green:((c&amp;gt;&amp;gt;8)&amp;amp;0xFF)/255.0f blue:(c&amp;amp;0xFF)/255.0f alpha:1.0f]
//背景色  
#define BACKGROUND_COLOR [UIColor colorWithRed:242.0/255.0 green:236.0/255.0 blue:231.0/255.0 alpha:1.0]  
//清除背景色  
#define CLEARCOLOR [UIColor clearColor] 

//4.加载图片宏：
#define LOADIMAGE(file,type) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:type]]
//5. NavBar高度
#define NavigationBar_HEIGHT 44
//6. 获取系统版本
#define IOS_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]
#define CurrentSystemVersion [[UIDevice currentDevice] systemVersion]

//7. 判断是真机还是模拟器
#if TARGET_OS_IPHONE
    //iPhone Device
#endif

#if TARGET_IPHONE_SIMULATOR
   //iPhone Simulator
#endif

//8. 设置View的tag属性
#define VIEWWITHTAG(_OBJECT, _TAG)    [_OBJECT viewWithTag : _TAG]

//9. GCD
#define BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)
#define MAIN(block) dispatch_async(dispatch_get_main_queue(),block)

//10. NSUserDefaults 实例化
#define USER_DEFAULT [NSUserDefaults standardUserDefaults]
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;本博客也会在 &lt;strong&gt;&lt;em&gt; lecoding &lt;/em&gt;&lt;/strong&gt; 微信公众号中同步更新，欢迎大家订阅，有什么问题可以在此一起交流。公众号搜索：&lt;strong&gt;&lt;em&gt; 乐Coding &lt;/em&gt;&lt;/strong&gt; 或者 &lt;strong&gt;&lt;em&gt; lecoding &lt;/em&gt;&lt;/strong&gt; 或者微信扫描下方二维码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/icon.jpg&quot; alt=&quot;icon&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Objective-C&lt;/code&gt;源文件在编译之前要先经过预编译器处理，然后再扔给&lt;code&gt;LLVM&lt;/code&gt;处理、优化。&lt;code&gt;Objectice-C&lt;/code&gt;编译器从源文件的输入到编译后的输出文件,处理过程分解后如下图：&lt;br&gt;&lt;img sr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS9 Storyboard新特性之 Storyboard References</title>
    <link href="http://lves.github.io/2016/05/24/iOS9-Storyboard%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BStoryboard-References/"/>
    <id>http://lves.github.io/2016/05/24/iOS9-Storyboard新特性之Storyboard-References/</id>
    <published>2016-05-24T01:25:35.000Z</published>
    <updated>2016-05-24T10:44:39.000Z</updated>
    
    <content type="html">&lt;p&gt;今天有空看了下iOS9 Storyboard的新特性，Xcode7给storyboard带来了以下特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分解一个单一的storyboard成多个storyboard,并通过 storyboard references  连接他们。&lt;/li&gt;
&lt;li&gt;通过 scene dock  给ViewController附加view。&lt;/li&gt;
&lt;li&gt;在storyboard上给 navigation bar添加多个button .&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;初始项目，在 &lt;code&gt;Main.storyboard&lt;/code&gt;中有一个 &lt;code&gt;TabBarViewController&lt;/code&gt;,它包含两个&lt;code&gt;HomeViewController&lt;/code&gt;和&lt;code&gt;UserViewController&lt;/code&gt;。&lt;br&gt;&lt;code&gt;HomeViewController&lt;/code&gt;是一个tableviewcontroller,点击cell进入&lt;code&gt;DetailViewController&lt;/code&gt;。UserViewcontroller是一个简单的ViewController。&lt;br&gt;Main.storyboard和项目目录如下图：&lt;br&gt;&lt;img src=&quot;/img/20160524/001.png&quot; alt=&quot;1.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/20160524/002.png&quot; alt=&quot;2.png&quot;&gt;&lt;br&gt;  项目中还有一个未使用的DiscoverStoryboard.storyboard ，在这个storyboard中只有一个简单的Controller，稍后我们会用到。&lt;br&gt;&lt;img src=&quot;/img/20160524/003.png&quot; alt=&quot;3.png&quot;&gt;&lt;br&gt;运行项目效果如下：&lt;br&gt;&lt;img src=&quot;/img/20160524/004.png&quot; alt=&quot;4.png&quot;&gt;&lt;br&gt;今天我们先看一下它的第一个特性，&lt;code&gt;storyboard&lt;/code&gt;的分解和引用 （&lt;code&gt;storyboard references&lt;/code&gt;）。&lt;br&gt;用&lt;code&gt;storyboard&lt;/code&gt;做过开发的猿都知道，&lt;code&gt;storyboard&lt;/code&gt;会慢慢的变得越来越臃肿；&lt;br&gt;还有一个”致命“的弱点就是使用&lt;code&gt;Git&lt;/code&gt;进行多人开发的时候经常造成冲突，让我们猿们无法忍受只想摔键盘啊！&lt;br&gt;即使我们可以使用多个&lt;code&gt;storyboard&lt;/code&gt;来解决但也无法实现使用&lt;code&gt;segue&lt;/code&gt;从一个&lt;code&gt;storyboard&lt;/code&gt;中的&lt;code&gt;viewcontroller&lt;/code&gt; push到另一个&lt;code&gt;storyboard&lt;/code&gt;中的&lt;code&gt;controller&lt;/code&gt;。&lt;br&gt;在Xcode7中这些问题通过&lt;code&gt;storyboard references&lt;/code&gt;都得到了很好的解决 。&lt;/p&gt;
&lt;p&gt;###一、创建一个Storyboard引用&lt;/p&gt;
&lt;p&gt;打开Main.stroyboard选中HomeController对应的三个controller如下图，然后点击菜单栏【Editor】选项中的【Refactor to storyboard…】按钮&lt;br&gt; &lt;img src=&quot;/img/20160524/005.png&quot; alt=&quot;5.png&quot;&gt;&lt;br&gt; &lt;img src=&quot;/img/20160524/006.png&quot; alt=&quot;6.png&quot;&gt;&lt;br&gt;在弹出框中给新的storyboard起个新的名字Home.storyboard：&lt;br&gt;&lt;img src=&quot;/img/20160524/007.png&quot; alt=&quot;7.png&quot;&gt;&lt;br&gt;保存后，你会发现目录中多了一个Home.storybaord。打开原来的Main.storyboard你会发现原理的Homecontroller变成了一个storyboard references。选中这个storyboard references  在右侧Attributes Inspector中显示如下图：&lt;br&gt;&lt;img src=&quot;/img/20160524/008.png&quot; alt=&quot;8.png&quot;&gt;&lt;br&gt;打开原来的的&lt;code&gt;Main.storyboard&lt;/code&gt;如下图，到此分解单个&lt;code&gt;storyboard&lt;/code&gt;称多个&lt;code&gt;storyboard&lt;/code&gt;就完成了，就这么简单。&lt;br&gt;&lt;img src=&quot;/img/20160524/009.png&quot; alt=&quot;9.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;###二、在团队开发中使用Storyboard&lt;br&gt;&lt;code&gt;storyboard references&lt;/code&gt; 还有另外一种使用情况，当我们开发多个功能模块时可能会出现，不同的人在自己的storyboard中开发然后通过storyboard references  把不同的功能模块连接起来。在上边说过我们有一个DiscoverStoryboard.storyboard 还没有用到，如何快速的把第三个功能模块合进来？&lt;br&gt;首先打开&lt;code&gt;Main.storyboard&lt;/code&gt;从 &lt;code&gt;Object Library&lt;/code&gt;中托出一个&lt;code&gt;storyboard references&lt;/code&gt; 到&lt;code&gt;User Interface&lt;/code&gt;中，&lt;br&gt;&lt;img src=&quot;/img/20160524/010.png&quot; alt=&quot;10.png&quot;&gt;&lt;br&gt;然后按住键盘&lt;code&gt;control&lt;/code&gt;键，点击鼠标左键从&lt;code&gt;TabBarController&lt;/code&gt;拖拽到 &lt;code&gt;storyboard reference&lt;/code&gt;，在弹出框中选择 &lt;code&gt;view controllers&lt;/code&gt;如下图：&lt;br&gt;&lt;img src=&quot;/img/20160524/011.png&quot; alt=&quot;11.png&quot;&gt;&lt;br&gt;选中 &lt;code&gt;storyboard reference&lt;/code&gt; 打开右侧&lt;code&gt;Attributes Inspector&lt;/code&gt; 设置&lt;code&gt;storyboard&lt;/code&gt; 为 &lt;code&gt;DiscoverStoryboard.storyboard&lt;/code&gt; 。好了到此添加一个已存在的storyboard成功。&lt;br&gt;&lt;img src=&quot;/img/20160524/012.png&quot; alt=&quot;12.png&quot;&gt;&lt;br&gt;运行项目如下图所示：&lt;br&gt;&lt;img src=&quot;/img/20160524/013.png&quot; alt=&quot;13.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; 原文链接：&lt;a href=&quot;http://lvesli.com/2016/05/24/iOS9-Storyboard%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BStoryboard-References/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.lvesli.com&lt;/a&gt; &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本博客也会在 &lt;strong&gt;&lt;em&gt; lecoding &lt;/em&gt;&lt;/strong&gt; 微信公众号中同步更新，欢迎大家订阅，有什么问题可以在此一起交流。公众号搜索：&lt;strong&gt;&lt;em&gt; 乐Coding &lt;/em&gt;&lt;/strong&gt; 或者 &lt;strong&gt;&lt;em&gt; lecoding &lt;/em&gt;&lt;/strong&gt; 或者微信扫描下方二维码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/icon.jpg&quot; alt=&quot;/img/icon.jpg&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天有空看了下iOS9 Storyboard的新特性，Xcode7给storyboard带来了以下特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分解一个单一的storyboard成多个storyboard,并通过 storyboard references  连接他们。&lt;/li&gt;
&lt;l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OS X 10.11 安装Cocoapods失败：Operation not permitted</title>
    <link href="http://lves.github.io/2016/05/23/OS-X-10-11-%E5%AE%89%E8%A3%85Cocoapods%E5%A4%B1%E8%B4%A5%EF%BC%9AOperation-not-permitted/"/>
    <id>http://lves.github.io/2016/05/23/OS-X-10-11-安装Cocoapods失败：Operation-not-permitted/</id>
    <published>2016-05-23T11:02:07.000Z</published>
    <updated>2016-05-24T10:46:08.000Z</updated>
    
    <content type="html">&lt;p&gt;   系统升级到 &lt;strong&gt;&lt;em&gt; OS X 10.11 &lt;/em&gt;&lt;/strong&gt;  (EI Capitan)的时候，当安装 &lt;strong&gt; CocoaPods &lt;/strong&gt; 的时候提示如下的错误：&lt;strong&gt;&lt;em&gt; Operation not permitted &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;一共有两种解决方案：&quot;&gt;&lt;a href=&quot;#一共有两种解决方案：&quot; class=&quot;headerlink&quot; title=&quot;一共有两种解决方案：&quot;&gt;&lt;/a&gt;一共有两种解决方案：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;1.官方解决方案；&lt;/p&gt;
&lt;p&gt;2.github解决方案，安装在其他目录（我采用的方案）；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;1-官方给出的解决方式是：自定义-GEM-HOME&quot;&gt;&lt;a href=&quot;#1-官方给出的解决方式是：自定义-GEM-HOME&quot; class=&quot;headerlink&quot; title=&quot;1.官方给出的解决方式是：自定义 GEM_HOME&quot;&gt;&lt;/a&gt;1.官方给出的解决方式是：自定义 GEM_HOME&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;$ mkdir -p $HOME/Software/ruby
$ export GEM_HOME=$HOME/Software/ruby
$ gem install cocoapods
[...]
1 gem installed
$ export PATH=$PATH:$HOME/Software/ruby/bin
$ pod --version
0.37.2  
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;Github-解决方案&quot;&gt;&lt;a href=&quot;#Github-解决方案&quot; class=&quot;headerlink&quot; title=&quot;Github 解决方案&quot;&gt;&lt;/a&gt;Github 解决方案&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;$ sudo gem install -n /usr/local/bin cocoapods
$ pod setup
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;建议开通VPN安装会快点，如果你没有vpn也可以参照一下&lt;strong&gt;&lt;em&gt; 唐巧 &lt;/em&gt;&lt;/strong&gt;的一篇博客：&lt;a href=&quot;http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; 原文链接：&lt;a href=&quot;http://lvesli.com/2016/05/23/OS-X-10-11-%E5%AE%89%E8%A3%85Cocoapods%E5%A4%B1%E8%B4%A5%EF%BC%9AOperation-not-permitted/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lvesli.com&lt;/a&gt; &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本博客也会在 &lt;strong&gt;&lt;em&gt; lecoding &lt;/em&gt;&lt;/strong&gt; 微信公众号中同步更新，欢迎大家订阅，有什么问题可以在此一起交流。公众号搜索：&lt;strong&gt;&lt;em&gt; 乐Coding &lt;/em&gt;&lt;/strong&gt; 或者 &lt;strong&gt;&lt;em&gt; lecoding &lt;/em&gt;&lt;/strong&gt; 或者微信扫描下方二维码：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/icon.jpg&quot; alt=&quot;https://github.com/Lves/lves.github.io/blob/master/images/icon.jpg?raw=true&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;   系统升级到 &lt;strong&gt;&lt;em&gt; OS X 10.11 &lt;/em&gt;&lt;/strong&gt;  (EI Capitan)的时候，当安装 &lt;strong&gt; CocoaPods &lt;/strong&gt; 的时候提示如下的错误：&lt;strong&gt;&lt;em&gt; Operation not p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lves.github.io/2016/05/20/hello-world/"/>
    <id>http://lves.github.io/2016/05/20/hello-world/</id>
    <published>2016-05-20T11:39:41.000Z</published>
    <updated>2016-05-24T10:37:41.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/icon.jpg&quot; alt=&quot;icon&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
